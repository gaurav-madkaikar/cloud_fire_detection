from flask import Flask, render_template, request, jsonify
from tensorflow import keras
from keras.layers import Dense
from keras.models import Sequential, load_model
from PIL import Image
import numpy as np
import cv2
from keras.preprocessing import image
from flask_mail import Mail, Message
import mailsettings

class_names = {1 : 'No Fire detected', 2 : 'Fire detected!! - Sending alert'}

app = Flask(__name__)

app.config['MAIL_USE_TLS'] = mailsettings.MAIL_USE_TLS
app.config['MAIL_USE_SSL'] = mailsettings.MAIL_USE_SSL
app.config['DEBUG']=mailsettings.DEBUG
app.config['MAIL_SERVER']=mailsettings.MAIL_SERVER
app.config['MAIL_PORT'] = mailsettings.MAIL_PORT
app.config['MAIL_USERNAME'] = mailsettings.MAIL_USERNAME
app.config['MAIL_PASSWORD'] = mailsettings.MAIL_PASSWORD
app.config['MAIL_ASCII_ATTACHMENTS'] = mailsettings.MAIL_ASCII_ATTACHMENTS
mail = Mail(app)

model = load_model('pretrained_model.h5')

# base_dir is the directory where images are stored. Modify according to cloud app.
base_dir = 'Testing'

# model_loc is where the model is stored. Modify according to cloud app.
model_loc = "pretrained_model.h5"

model=load_model(model_loc)

# Home Page
@app.route('/', methods=['GET', 'POST'])
def home():
    print("Athome!")
    return render_template('home.html')

# Recieves image and runs model
@app.route('/submit', methods=['GET', 'POST'])
def submit_update():
    if request.method == 'POST':
        print("Reached submit")
        IMG_SIZE = 64
        mail_notif=0
        file = request.files['my_image']
        img_path = "static/images" + file.filename	
        file.save(img_path)
        print(img_path)

        if file:
            print("Entering classification")
            # img = Image.open(file.stream)
            # img = img.resize((224, 224))
            # img = np.asarray(img) / 255.0
            # img = np.expand_dims(img, axis=0)
            # pred = model.predict(img)[0][0]
            # result = class_names[int(round(pred))]


            img_array = cv2.imread(img_path)  # convert to array
            new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  # resize to normalize data size

            X = []
            X.append(new_array)

            X = np.array(X).reshape(-1, IMG_SIZE, IMG_SIZE, 3)
            X = X/255.0
            X.shape[1:]

            result = int((model.predict(X)>0.5)[0][0])
            result+=1
            # print(Res:result)
            # i = image.load_img(img_path, target_size=(100,100))
            # i = image.img_to_array(i)
            # i = i.reshape(-1, IMG_SIZE, IMG_SIZE, 3)

            print(f"Result: {result} and {class_names[result]}")
            if result==2:
                msg = Message('URGENT: FIRE DETECTED', sender = 'firedetect.kgp@gmail.com', recipients = ['pattnayak.ayushkgp@gmail.com'])
                msg.body = """This is to notify that fire has been detected at your home! Fire services have been sent a notification. \n\n\n-----------------------------------------------------------\nMessage autogenerated by FireAssistant"""
                
                
                with app.open_resource(img_path) as fp:  
                    msg.attach(img_path, "image/jpeg", fp.read()) 
                mail.send(msg)
                mail_notif = 1
            x = """This is to notify that fire has been detected at your home! Fire services have been sent a notification. \n\n\n
            ------------------------------------------------------------\nMessage autogenerated by FireAssistant"""
            print(x)
            return render_template('home.html', prediction = class_names[result], img_path = img_path, mail_notif = mail_notif)
            # return render_template('result.html', result=result)

if __name__ == '__main__':
    app.run(debug=True)